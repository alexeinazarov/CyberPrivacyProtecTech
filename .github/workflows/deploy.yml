name: Deploy Jekyll site to GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write  # Ensure you have write permissions to push the changes

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Ensure full repository is checked out

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.4

    - name: Remove Gemfile.lock
      run: |
        if [ -f Gemfile.lock ]; then rm Gemfile.lock; fi

    - name: Install dependencies
      run: |
        gem install bundler -v 2.4.22
        bundle install

    - name: Temporarily allow Gemfile.lock to be committed
      run: |
        sed -i '/Gemfile.lock/d' .gitignore

    - name: Commit changes if any
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Regenerate Gemfile.lock and update .gitignore"
          git push
        else
          echo "No changes to commit"
        fi

    - name: Restore .gitignore
      run: |
        echo "Gemfile.lock" >> .gitignore

    - name: List files after checkout
      run: |
        echo "Listing files after checkout:"
        ls -R .

    - name: Build site
      run: bundle exec jekyll build --verbose --trace

    - name: List files in _site directory
      run: |
        echo "Listing files in _site directory:"
        ls -R _site

    - name: Remove generated sitemap
      run: |
        rm -f _site/sitemap.xml

    - name: Verify and add custom sitemap
      run: |
        if [ -f custom_sitemap.xml ]; then
          echo "Custom sitemap found, touching and copying to _site directory."
          touch custom_sitemap.xml  # Update the timestamp
          cp custom_sitemap.xml _site/sitemap.xml
        else
          echo "Custom sitemap not found!"
          exit 1
        fi

    - name: List files in _site directory after adding custom sitemap
      run: |
        echo "Listing files in _site directory after adding custom sitemap:"
        ls -R _site

    - name: Verify _site directory contents before deployment
      run: |
        echo "Verifying contents of _site directory before deployment:"
        find _site

    - name: Get absolute path of _site directory
      run: |
        echo "SITE_PATH=$(realpath _site)" >> $GITHUB_ENV

    - name: Display SITE_PATH
      run: |
        echo "SITE_PATH: $SITE_PATH"

    - name: Create or update gh-pages branch
      run: |
        set -e
        echo "Fetching origin..."
        git fetch origin
        if ! git show-ref --verify --quiet refs/heads/gh-pages; then
          echo "gh-pages branch does not exist, creating it..."
          git checkout --orphan gh-pages
          git reset --hard
          git commit --allow-empty -m "Initial gh-pages commit"
          git push origin gh-pages || (echo "Push failed, retrying with --force" && git push --force origin gh-pages)
          git checkout main
        else
          echo "gh-pages branch exists"
          git checkout gh-pages
          git pull origin gh-pages || (echo "Pull failed, resetting to origin/gh-pages" && git reset --hard origin/gh-pages)
          git checkout main
        fi

    - name: Commit and push changes to gh-pages branch
      run: |
        set -e
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout gh-pages
        git pull origin gh-pages || git reset --hard origin/gh-pages
        git add -f _site/sitemap.xml
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "Deploy updated sitemap"
          git push origin gh-pages --force || (echo "Push failed, retrying with --force" && git push --force origin gh-pages)
        else
          echo "No changes to commit"
        fi

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ env.SITE_PATH }}
        keep_files: true

    - name: Verify sitemap on server
      run: |
        echo "Checking deployed sitemap on server:"
        curl -I https://alexeinazarov.github.io/CyberPrivacyProtecTech/sitemap.xml

    - name: Clear GitHub Pages cache
      run: |
        echo "Clearing GitHub Pages cache for sitemap:"
        curl -X PURGE https://alexeinazarov.github.io/CyberPrivacyProtecTech/sitemap.xml

    - name: Verify sitemap after cache clear
      run: |
        echo "Checking deployed sitemap on server after cache clear:"
        curl -I https://alexeinazarov.github.io/CyberPrivacyProtecTech/sitemap.xml

